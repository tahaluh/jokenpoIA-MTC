{"version":3,"file":"static/js/74.4fad5677.chunk.js","mappings":"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","sources":["components/iconify/Iconify.tsx","utils/markov.ts","utils/lstm.ts","pages/gamePage.tsx"],"sourcesContent":["import { forwardRef } from 'react';\r\n// icons\r\nimport { Icon } from '@iconify/react';\r\n// @mui\r\nimport { Box, BoxProps } from '@mui/material';\r\n//\r\nimport { IconifyProps } from './types';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface Props extends BoxProps {\r\n  icon: IconifyProps;\r\n}\r\n\r\nconst Iconify = forwardRef<SVGElement, Props>(({ icon, width = 20, sx, ...other }, ref) => (\r\n  <Box ref={ref} component={Icon} icon={icon} sx={{ width, height: width, ...sx }} {...other} />\r\n));\r\n\r\nexport default Iconify;\r\n","interface probabilitiesRPS {\r\n  0: number;\r\n  1: number;\r\n  2: number;\r\n}\r\n\r\nexport type GameMove = 0 | 1 | 2;\r\ntype TransitionMatrix = number[][];\r\ntype gameResult = -1 | 0 | 1;\r\n\r\ninterface playResponse {\r\n  result: gameResult;\r\n}\r\n\r\nexport interface statResponse {\r\n  nOfWins: number;\r\n  nOfTies: number;\r\n  nOfLoses: number;\r\n  nOfRounds: number;\r\n  playerWinRate: number;\r\n  iaWinRate: number;\r\n  tieRate: number;\r\n}\r\n\r\nexport default class MarkovIA {\r\n  WinTransitionMatrix: TransitionMatrix = Array.from({ length: 3 }, () =>\r\n    Array(3).fill(1)\r\n  );\r\n  LoseTransitionMatrix: TransitionMatrix = Array.from({ length: 3 }, () =>\r\n    Array(3).fill(1)\r\n  );\r\n  TieTransitionMatrix: TransitionMatrix = Array.from({ length: 3 }, () =>\r\n    Array(3).fill(1)\r\n  );\r\n  probabilitiesRPS: probabilitiesRPS = [1 / 3, 1 / 3, 1 / 3];\r\n  prevPlayerMove: GameMove = 0;\r\n  prevResult: gameResult = 0;\r\n\r\n  nOfWins: number = 0;\r\n  nOfLoses: number = 0;\r\n  nOfTies: number = 0;\r\n  nOfRounds: number = 0;\r\n\r\n  constructor() {}\r\n\r\n  public play(playerMove: GameMove): playResponse {\r\n    if (this.nOfRounds > 0) {\r\n      this.updateMatrix(playerMove);\r\n      this.calcProbabilities();\r\n    }\r\n\r\n    let iaMove = this.calcIAMove();\r\n    let result = this.checkResult(playerMove, iaMove);\r\n    this.prevPlayerMove = playerMove;\r\n    this.prevResult = result;\r\n    return { result };\r\n  }\r\n  public stats(): statResponse {\r\n    return {\r\n      nOfLoses: this.nOfLoses,\r\n      nOfRounds: this.nOfRounds,\r\n      nOfTies: this.nOfTies,\r\n      nOfWins: this.nOfTies,\r\n      playerWinRate: this.nOfWins / this.nOfRounds,\r\n      iaWinRate: this.nOfLoses / this.nOfRounds,\r\n      tieRate: this.nOfTies / this.nOfRounds,\r\n    };\r\n  }\r\n\r\n  private calcIAMove(): GameMove {\r\n    let randNumber = Math.floor(Math.random() * 100) + 1;\r\n\r\n    let rangeR = this.probabilitiesRPS[0] * 100;\r\n    let RangeP = this.probabilitiesRPS[1] * 100;\r\n\r\n    if (randNumber <= rangeR) {\r\n      return 1;\r\n    } else if (randNumber <= rangeR + RangeP) {\r\n      return 2;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  private calcProbabilities(): probabilitiesRPS {\r\n    let probabilitiesRPS: probabilitiesRPS = [1 / 3, 1 / 3, 1 / 3];\r\n    let TransitionMatrix: TransitionMatrix;\r\n\r\n    if (this.prevResult === 1) {\r\n      TransitionMatrix = this.WinTransitionMatrix;\r\n    } else if (this.prevResult === 0) {\r\n      TransitionMatrix = this.TieTransitionMatrix;\r\n    } else if (this.prevResult === -1) {\r\n      TransitionMatrix = this.LoseTransitionMatrix;\r\n    } else {\r\n      return probabilitiesRPS;\r\n    }\r\n\r\n    let sum = TransitionMatrix[this.prevPlayerMove].reduce((a, b) => a + b, 0);\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      probabilitiesRPS[i as keyof probabilitiesRPS] =\r\n        TransitionMatrix[this.prevPlayerMove][i] / sum;\r\n    }\r\n\r\n    this.probabilitiesRPS = probabilitiesRPS;\r\n    return probabilitiesRPS;\r\n  }\r\n  private updateMatrix(playerMove: GameMove) {\r\n    let result = this.prevResult;\r\n    if (result === 1) {\r\n      this.WinTransitionMatrix[this.prevPlayerMove][playerMove] += 1;\r\n    } else if (result === 0) {\r\n      this.TieTransitionMatrix[this.prevPlayerMove][playerMove] += 1;\r\n    } else if (result === -1) {\r\n      this.LoseTransitionMatrix[this.prevPlayerMove][playerMove] += 1;\r\n    }\r\n  }\r\n  private checkResult(playerMove: number, iaMove: number): gameResult {\r\n    let result: gameResult;\r\n\r\n    if (playerMove === iaMove) {\r\n      result = 0;\r\n    } else if (\r\n      (playerMove === 0 && iaMove === 2) ||\r\n      (playerMove === 1 && iaMove === 0) ||\r\n      (playerMove === 2 && iaMove === 1)\r\n    ) {\r\n      result = 1;\r\n    } else {\r\n      result = -1;\r\n    }\r\n\r\n    this.addResult(result);\r\n\r\n    return result;\r\n  }\r\n  private addResult(result: number) {\r\n    if (result === 1) {\r\n      this.nOfWins += 1;\r\n    } else if (result === -1) {\r\n      this.nOfLoses += 1;\r\n    } else {\r\n      this.nOfTies += 1;\r\n    }\r\n    this.nOfRounds++;\r\n  }\r\n}\r\n","import * as brain from \"brain.js\";\r\nexport type GameMove = 0 | 1 | 2;\r\ntype gameResult = -1 | 0 | 1;\r\n\r\ninterface playResponse {\r\n  result: gameResult;\r\n}\r\n\r\ninterface statResponse {\r\n  nOfWins: number;\r\n  nOfTies: number;\r\n  nOfLoses: number;\r\n  nOfRounds: number;\r\n  playerWinRate: number;\r\n  iaWinRate: number;\r\n  tieRate: number;\r\n}\r\n\r\nexport default class LstmAI {\r\n  prevResult: gameResult = 0;\r\n\r\n  nOfWins: number = 0;\r\n  nOfLoses: number = 0;\r\n  nOfTies: number = 0;\r\n  nOfRounds: number = 0;\r\n  playerMoves: GameMove[] = [];\r\n  memorySize: number = 5;\r\n\r\n  net = new brain.recurrent.LSTMTimeStep();\r\n\r\n  constructor(memorySize: number) {\r\n    this.memorySize = memorySize;\r\n  }\r\n\r\n  public play(playerMove: GameMove): playResponse {\r\n    this.prepareData();\r\n    let iaMove = this.calcIAMove();\r\n    this.updatePattern(playerMove);\r\n    let result = this.checkResult(playerMove, iaMove);\r\n    this.prevResult = result;\r\n    return { result };\r\n  }\r\n  public stats(): statResponse {\r\n    return {\r\n      nOfLoses: this.nOfLoses,\r\n      nOfRounds: this.nOfRounds,\r\n      nOfTies: this.nOfTies,\r\n      nOfWins: this.nOfTies,\r\n      playerWinRate: this.nOfWins / this.nOfRounds,\r\n      iaWinRate: this.nOfLoses / this.nOfRounds,\r\n      tieRate: this.nOfTies / this.nOfRounds,\r\n    };\r\n  }\r\n\r\n  private updatePattern(playerMove: GameMove) {\r\n    if (this.nOfRounds !== 0) {\r\n      this.playerMoves.shift();\r\n      this.playerMoves.push(playerMove);\r\n    }\r\n  }\r\n\r\n  private prepareData() {\r\n    if (this.playerMoves.length < 1) {\r\n      for (let index = 1; index <= this.memorySize; index++) {\r\n        this.playerMoves.push(Math.floor(Math.random() * 3) as GameMove);\r\n      }\r\n    }\r\n  }\r\n  private calcIAMove(): GameMove {\r\n    if (this.playerMoves.length < this.memorySize) {\r\n      return (Math.floor(Math.random() * 3) + 1) as GameMove;\r\n    }\r\n\r\n    let trainData: number[] = this.playerMoves.map((playerMove) => {\r\n      return Number(playerMove + 1);\r\n    });\r\n    if (trainData.length > this.memorySize)\r\n      trainData = trainData.slice(trainData.length - this.memorySize);\r\n    this.net.train([trainData], {\r\n      iterations: 100,\r\n    });\r\n    const predictedPlayerMove = this.net.run(trainData);\r\n\r\n    const roundedPlayerMove = Math.round(predictedPlayerMove - 1);\r\n\r\n    //  pedra - 0 - 1\r\n    //  papel - 1 - 2\r\n    //  tesoura - 2 - 0\r\n\r\n    let test: GameMove = ((roundedPlayerMove + 1) % 3) as GameMove;\r\n    return test;\r\n\r\n    if (roundedPlayerMove == 0) {\r\n      return 1;\r\n    } else if (roundedPlayerMove == 1) {\r\n      return 2;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  private checkResult(playerMove: number, iaMove: number): gameResult {\r\n    let result: gameResult;\r\n\r\n    if (playerMove === iaMove) {\r\n      result = 0;\r\n    } else if (\r\n      (playerMove === 0 && iaMove === 2) ||\r\n      (playerMove === 1 && iaMove === 0) ||\r\n      (playerMove === 2 && iaMove === 1)\r\n    ) {\r\n      result = 1;\r\n    } else {\r\n      result = -1;\r\n    }\r\n\r\n    this.addResult(result);\r\n\r\n    return result;\r\n  }\r\n  private addResult(result: number) {\r\n    if (result === 1) {\r\n      this.nOfWins += 1;\r\n    } else if (result === -1) {\r\n      this.nOfLoses += 1;\r\n    } else {\r\n      this.nOfTies += 1;\r\n    }\r\n    this.nOfRounds++;\r\n  }\r\n}\r\n","import {\r\n  Button,\r\n  Grid,\r\n  IconButton,\r\n  Input,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport Iconify from \"../components/iconify\";\r\nimport MarkovIA, { GameMove, statResponse } from \"../utils/markov\";\r\nimport LstmIA from \"../utils/lstm\";\r\n\r\nlet markovIA = new MarkovIA();\r\nlet markovIA2 = new MarkovIA();\r\nlet markovIA3 = new MarkovIA();\r\nlet lstmIA = new LstmIA(10);\r\n\r\nexport default function GamePage() {\r\n  const nJogadas = 500;\r\n  const [playerPoints, setPlayerPoints] = useState<number>(0);\r\n  const [aiPoints, setAIPoints] = useState<number>(0);\r\n  const [jogadas, setJogadas] = useState<number[][]>([[], [], [], []]);\r\n  const [resultados, setResultados] = useState<number[][]>([[], [], [], []]);\r\n  const [winLoseTie, setWinLoseTie] = useState<number>(0);\r\n  const [stats, setStats] = useState<statResponse[]>([]);\r\n\r\n  const [state, setState] = useState<number>(0);\r\n  const [nome, setNome] = useState(\"\");\r\n\r\n  const nextStep = () => {\r\n    setPlayerPoints(0);\r\n    setAIPoints(0);\r\n    setState(state + 1);\r\n  };\r\n\r\n  const addPlayerPoint = () => {\r\n    setPlayerPoints((prev) => prev + 1);\r\n  };\r\n\r\n  const addAiPoint = () => {\r\n    setAIPoints((prev) => prev + 1);\r\n  };\r\n\r\n  const addJogada = (jogada: number) => {\r\n    setJogadas((prev) => [\r\n      ...prev.map((prevItem, index) => {\r\n        return index == state ? [...prevItem.concat(jogada)] : [...prevItem];\r\n      }),\r\n    ]);\r\n  };\r\n\r\n  const addResultado = (resultado: number) => {\r\n    setResultados((prev) => [\r\n      ...prev.map((prevItem, index) => {\r\n        return index == state ? [...prevItem.concat(resultado)] : [...prevItem];\r\n      }),\r\n    ]);\r\n  };\r\n\r\n  const handlePlay = (jogada: GameMove) => {\r\n    if (state >= 4) return;\r\n    addJogada(jogada);\r\n    let output;\r\n\r\n    if (state == 0) {\r\n      output = markovIA.play(jogada);\r\n    } else if (state == 1) {\r\n      output = markovIA2.play(jogada);\r\n    } else if (state == 2) {\r\n      output = markovIA3.play(jogada);\r\n    } else if (state == 3) {\r\n      output = lstmIA.play(jogada);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    addResultado(output.result);\r\n    setWinLoseTie(output.result);\r\n\r\n    if (jogadas[state].length + 1 >= nJogadas) {\r\n      let stats: statResponse;\r\n      if (state == 0) {\r\n        stats = markovIA.stats();\r\n      } else if (state == 1) {\r\n        stats = markovIA2.stats();\r\n      } else if (state == 2) {\r\n        stats = markovIA3.stats();\r\n      } else if (state == 3) {\r\n        stats = lstmIA.stats();\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      setStats((prev) => prev.concat(stats));\r\n\r\n      nextStep();\r\n    }\r\n  };\r\n\r\n  const playRock = () => {\r\n    handlePlay(0);\r\n  };\r\n  const playPaper = () => {\r\n    handlePlay(1);\r\n  };\r\n  const playScissors = () => {\r\n    handlePlay(2);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    let resultList = {\r\n      games: jogadas.map((state, stateIndex) => {\r\n        return {\r\n          rounds: state.map((jogada, jogadaIndex) => {\r\n            return {\r\n              playerMove: jogada,\r\n              result: resultados[stateIndex][jogadaIndex],\r\n            };\r\n          }),\r\n          stats: stats[stateIndex],\r\n        };\r\n      }),\r\n      playerName: nome ? nome : \"guest\",\r\n    };\r\n    console.log(resultList);\r\n    console.log(nome);\r\n    var dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(resultList));\r\n\r\n    var dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(resultList));\r\n    var downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\r\n      \"download\",\r\n      (nome ? nome : \"guest\") + \".json\"\r\n    );\r\n    document.body.appendChild(downloadAnchorNode); // required for firefox\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.getRootNode();\r\n  }, [winLoseTie]);\r\n\r\n  // utiliza os botões para jogar\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", detectKeyDown, true);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", detectKeyDown, true);\r\n    };\r\n  }, [jogadas]);\r\n\r\n  const detectKeyDown = (e: any) => {\r\n    if (e.key == 1) {\r\n      playRock();\r\n    } else if (e.key == 2) {\r\n      playPaper();\r\n    } else if (e.key == 3) {\r\n      playScissors();\r\n    } else if (e.key == 8) {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Pedra, Papel... e AI?</title>\r\n      </Helmet>\r\n      {(state == 2 || state == 3) && (\r\n        <Grid // contador de pontos\r\n          container\r\n          item\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          sx={{\r\n            position: \"fixed\",\r\n            top: \"0\",\r\n          }}\r\n        >\r\n          <Grid item paddingX={3} borderTop={0}>\r\n            <Typography padding={1} fontSize={20} fontFamily={\"cursive\"}>\r\n              Você {`${playerPoints} - ${aiPoints}`} IA\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      <Grid\r\n        container\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        minHeight=\"100vh\"\r\n        spacing={6}\r\n        sx={{\r\n          backgroundColor:\r\n            winLoseTie == -1 && state >= 2 && state <= 3\r\n              ? \"red\"\r\n              : winLoseTie === 1 && state >= 2 && state <= 3\r\n              ? \"green\"\r\n              : \"white\",\r\n        }}\r\n      >\r\n        {state <= 3 && (\r\n          <Grid\r\n            item\r\n            container\r\n            xs={8}\r\n            md={6}\r\n            lg={4}\r\n            xl={3}\r\n            justifyContent=\"center\"\r\n            flexDirection=\"row\"\r\n            gap={5}\r\n          >\r\n            <Typography>Total: {jogadas[state].length}</Typography>\r\n          </Grid>\r\n        )}\r\n        <Grid\r\n          item\r\n          container\r\n          xs={8}\r\n          md={6}\r\n          lg={4}\r\n          xl={3}\r\n          justifyContent=\"center\"\r\n          flexDirection=\"row\"\r\n          gap={5}\r\n        >\r\n          {state <= 3 && (\r\n            <>\r\n              <Grid item justifyContent=\"center\">\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  sx={{ border: \"1px solid black\" }}\r\n                  onClick={playRock}\r\n                >\r\n                  {(state == 0 || state == 1) && (\r\n                    <Grid\r\n                      container\r\n                      width=\"75px\"\r\n                      height=\"75px\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      1\r\n                    </Grid>\r\n                  )}\r\n                  {(state === 2 || state == 3) && (\r\n                    <Iconify icon=\"la:hand-rock-solid\" width=\"75px\" />\r\n                  )}\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item justifyContent=\"center\">\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  sx={{ border: \"1px solid black\" }}\r\n                  onClick={playPaper}\r\n                >\r\n                  {(state == 0 || state == 1) && (\r\n                    <Grid\r\n                      container\r\n                      width=\"75px\"\r\n                      height=\"75px\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      2\r\n                    </Grid>\r\n                  )}\r\n                  {(state === 2 || state == 3) && (\r\n                    <Iconify icon=\"la:hand-paper-solid\" width=\"75px\" />\r\n                  )}\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item justifyContent=\"center\">\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  sx={{ border: \"1px solid black\" }}\r\n                  onClick={playScissors}\r\n                >\r\n                  {(state == 0 || state == 1) && (\r\n                    <Grid\r\n                      container\r\n                      width=\"75px\"\r\n                      height=\"75px\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      3\r\n                    </Grid>\r\n                  )}{\" \"}\r\n                  {(state === 2 || state == 3) && (\r\n                    <Iconify icon=\"la:hand-scissors-solid\" width=\"75px\" />\r\n                  )}\r\n                </IconButton>\r\n              </Grid>\r\n            </>\r\n          )}\r\n\r\n          {state >= 4 && (\r\n            <>\r\n              <Grid item container xs={12} justifyContent=\"center\">\r\n                <TextField\r\n                  fullWidth\r\n                  placeholder=\"Insira seu nome...\"\r\n                  label=\"Nome\"\r\n                  value={nome}\r\n                  onChange={(e) => {\r\n                    setNome(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item container xs={12} justifyContent=\"center\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Baixar\r\n                </Button>\r\n              </Grid>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n"],"names":["forwardRef","_ref","ref","icon","_ref$width","width","sx","other","_objectWithoutProperties","_excluded","_jsx","Box","_objectSpread","component","Icon","height","MarkovIA","_classCallCheck","WinTransitionMatrix","Array","from","length","fill","LoseTransitionMatrix","TieTransitionMatrix","probabilitiesRPS","prevPlayerMove","prevResult","nOfWins","nOfLoses","nOfTies","nOfRounds","_createClass","key","value","playerMove","this","updateMatrix","calcProbabilities","iaMove","calcIAMove","result","checkResult","playerWinRate","iaWinRate","tieRate","randNumber","Math","floor","random","rangeR","RangeP","TransitionMatrix","sum","reduce","a","b","i","addResult","LstmAI","memorySize","playerMoves","net","brain","LSTMTimeStep","prepareData","updatePattern","shift","push","index","trainData","map","Number","slice","train","iterations","predictedPlayerMove","run","roundedPlayerMove","round","markovIA","markovIA2","markovIA3","lstmIA","LstmIA","GamePage","_useState","useState","_useState2","_slicedToArray","playerPoints","setPlayerPoints","_useState3","_useState4","aiPoints","setAIPoints","_useState5","_useState6","jogadas","setJogadas","_useState7","_useState8","resultados","setResultados","_useState9","_useState10","winLoseTie","setWinLoseTie","_useState11","_useState12","stats","setStats","_useState13","_useState14","state","setState","_useState15","_useState16","nome","setNome","handlePlay","jogada","output","resultado","prev","_toConsumableArray","prevItem","concat","addJogada","play","playRock","playPaper","playScissors","handleSubmit","resultList","games","stateIndex","rounds","jogadaIndex","playerName","console","log","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","useEffect","getRootNode","addEventListener","detectKeyDown","removeEventListener","e","_jsxs","_Fragment","children","Helmet","Grid","container","item","justifyContent","alignItems","position","top","paddingX","borderTop","Typography","padding","fontSize","fontFamily","flexDirection","minHeight","spacing","backgroundColor","xs","md","lg","xl","gap","IconButton","color","border","onClick","Iconify","TextField","fullWidth","placeholder","label","onChange","target","Button","variant","size"],"sourceRoot":""}